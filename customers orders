The SQL code provided creates two tables, "customers" and "orders," to store customer and order information, respectively. The "customers" 
table has columns for customer ID, name, and email, with the ID set as the primary key and auto-incremented. The "orders" table has columns
for order ID, customer ID (referencing the "customers" table), item, and price. Sample data is inserted into both tables to populate them.

The code includes two queries. The first query uses a left outer join to combine data from the "customers" and "orders" tables based on 
the customer ID. It selects the customer's name, email, order item, and price. This query helps retrieve information about customers and 
their associated orders.

The second query also employs a left outer join between the "customers" and "orders" tables. It selects the customer's name and email, 
along with the total sum of their order prices (computed using the sum() function) as "total". The results are grouped by the customer's 
name and ordered by the total price in descending order. This query provides an overview of customers, their email addresses, and the 
total amount spent on orders, allowing for analysis and identification of high-spending customers.

CREATE TABLE customers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    email TEXT);
    
INSERT INTO customers (name, email) VALUES ("Doctor Who", "doctorwho@timelords.com");
INSERT INTO customers (name, email) VALUES ("Harry Potter", "harry@potter.com");
INSERT INTO customers (name, email) VALUES ("Captain Awesome", "captain@awesome.com");

CREATE TABLE orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER,
    item TEXT,
    price REAL);

INSERT INTO orders (customer_id, item, price)
    VALUES (1, "Sonic Screwdriver", 1000.00);
INSERT INTO orders (customer_id, item, price)
    VALUES (2, "High Quality Broomstick", 40.00);
INSERT INTO orders (customer_id, item, price)
    VALUES (1, "TARDIS", 1000000.00);
    
SELECT customers.name, customers.email, orders.item, orders.price
From customers
LEFT OUTER JOIN orders
ON customers.id = orders.customer_id;

SELECT customers.name, customers.email, sum(orders.price) As total
FROM customers
LEFT OUTER JOIN orders 
ON customers.id = orders.customer_id
GROUP BY Customers.name
ORDER BY orders.price DESC;
